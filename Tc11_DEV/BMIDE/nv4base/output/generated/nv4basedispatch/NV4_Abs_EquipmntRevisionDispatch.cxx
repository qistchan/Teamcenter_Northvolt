//@<COPYRIGHT>@
//==================================================
//Copyright $2019.
//Siemens Product Lifecycle Management Software Inc.
//All Rights Reserved.
//==================================================
//@<COPYRIGHT>@

/*==================================================================================================
File description:
    This file contains the implementation for the Business Object, NV4_Abs_EquipmntRevisionDispatch
    Filename:   NV4_Abs_EquipmntRevisionDispatch.cxx
    Module:     nv4basedispatch
    @BMIDE autogenerated
==================================================================================================*/

#include <nv4basedispatch/NV4_Abs_EquipmntRevisionDispatch.hxx>

#include <stdarg.h>

#include <foundationdispatch/BusinessObjectDispatch.hxx>
#include <metaframework/BusinessObjectRegistry.hxx>
#include <metaframework/BusinessObject.hxx>
#include <metaframework/BusinessObjectRef.hxx>
#include <base_utils/ResultCheck.hxx>
#include <base_utils/IFail.hxx>
#include <tccore/tctype.hxx>
#include <extensionframework/OperationDispatcherRegistry.hxx>
#include <property/prop_msg.h>
#include <mld/journal/journal.h>


using  namespace  ::nv4base;


::nv4base::NV4_Abs_EquipmntRevisionDispatch*  ::nv4base::NV4_Abs_EquipmntRevisionDispatch::m_dispatch = 0;


//----------------------------------------------------------------------------------
//  ::nv4base::NV4_Abs_EquipmntRevisionDispatch::getInstance()
//  Get the singleton class instance
//----------------------------------------------------------------------------------
::nv4base::NV4_Abs_EquipmntRevisionDispatch&  ::nv4base::NV4_Abs_EquipmntRevisionDispatch::getInstance()
{
    if( 0 == m_dispatch )   //  Only allow one instance of the class to be generated.
    {
        m_dispatch = new  ::nv4base::NV4_Abs_EquipmntRevisionDispatch;
        NV4_Abs_EquipmntRevisionDelegate::setInstance( m_dispatch );
    }
    return  *m_dispatch;
}

//----------------------------------------------------------------------------------
//  ::nv4base::NV4_Abs_EquipmntRevisionDispatch::NV4_Abs_EquipmntRevisionDispatch()
//  Constructor for the class
//----------------------------------------------------------------------------------
::nv4base::NV4_Abs_EquipmntRevisionDispatch::NV4_Abs_EquipmntRevisionDispatch():NV4_Abs_EquipmntRevisionDelegate()
{
}

//----------------------------------------------------------------------------------
//  ::nv4base::NV4_Abs_EquipmntRevisionDispatch::~NV4_Abs_EquipmntRevisionDispatch()
//  Destructor for the class
//----------------------------------------------------------------------------------
::nv4base::NV4_Abs_EquipmntRevisionDispatch::~NV4_Abs_EquipmntRevisionDispatch()
{
}

//----------------------------------------------------------------------------------
//  ::nv4base::NV4_Abs_EquipmntRevisionDispatch::constructor()
//  Static constructor for the class
//----------------------------------------------------------------------------------
::Teamcenter::RootObject*  ::nv4base::NV4_Abs_EquipmntRevisionDispatch::constructor()
{
    NV4_Abs_EquipmntRevision*  busObj = new  NV4_Abs_EquipmntRevision;
    return  busObj;
}

//----------------------------------------------------------------------------------
//  ::nv4base::NV4_Abs_EquipmntRevisionDispatch::initializeClass()
//  Initialize the class
//----------------------------------------------------------------------------------
int  ::nv4base::NV4_Abs_EquipmntRevisionDispatch::initializeClass()
{
    
    if( JOURNAL_is_journaling() )
    {
        JOURNAL_routine_start( "::nv4base::NV4_Abs_EquipmntRevisionDispatch::initializeClass" );
        JOURNAL_routine_call();
    }
    int ifail = 0;

    try
    {
        static bool  initialized = false;
        if( !initialized )
        {
            initialized = true;
            getInstance();

            //  call parent class initialize
            ResultCheck  rStat = ::Teamcenter::ItemRevisionDispatch::initializeClass();

            rStat = NV4_Abs_EquipmntRevisionDelegate::initializeClass();
        }
    }
    catch( const IFail& ex )
    {
        ifail = ex.ifail();
    }

    
    if( JOURNAL_is_journaling() )
    {
        JOURNAL_return_value( ifail );
        JOURNAL_routine_end();
    }
    return  ifail;
}


///
/// finalize operation input
/// @param pSavAsInput - desc
/// @param vecDeepCopyData - desc
/// @return - returns an int
///
int  ::nv4base::NV4_Abs_EquipmntRevisionDispatch::super_NV4_Abs_EquipmntRevision_finalizeSaveAsInputBase(NV4_Abs_EquipmntRevision &ifObj,  ::Teamcenter::SaveAsInput *pSavAsInput, std::vector<  ::Teamcenter::DeepCopyData* > *vecDeepCopyData )
{
    int ifail = 0;
    
    if( JOURNAL_is_journaling() )
    {
        JOURNAL_routine_start( "::nv4base::NV4_Abs_EquipmntRevisionDispatch::super_NV4_Abs_EquipmntRevision_finalizeSaveAsInputBase" );
        JOURNAL_address_in( pSavAsInput );
        JOURNAL_routine_call();
    }

    //  call parent implementation at ItemRevision
    ifail = ((Teamcenter::ItemRevisionDispatch&)Teamcenter::ItemRevisionDelegate::getInstance()).finalizeSaveAsInputBase( ifObj, pSavAsInput, vecDeepCopyData  );

    
    if( JOURNAL_is_journaling() )
    {
        JOURNAL_return_value( ifail );
        JOURNAL_routine_end();
    }
    return  ifail;
}



    //  OperationDispatcher SubClass definitions

