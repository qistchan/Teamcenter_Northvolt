//@<COPYRIGHT>@
//==================================================
//Copyright $2019.
//Siemens Product Lifecycle Management Software Inc.
//All Rights Reserved.
//==================================================
//@<COPYRIGHT>@

/*==================================================================================================
File description:
    This file contains the declaration for the Business Object, NV4_Abs_EquipmntRevision
    Filename:   NV4_Abs_EquipmntRevision.hxx
    Module:     NV4_LibCore
    @BMIDE autogenerated
==================================================================================================*/

#ifndef NV4BASE__NV4_ABS_EQUIPMNTREVISION__HXX
#define NV4BASE__NV4_ABS_EQUIPMNTREVISION__HXX

#include <tccore/ItemRevision.hxx>

#include <NV4_LibCore/libnv4_libcore_exports.h>

namespace nv4base
{
    class NV4_Abs_EquipmntRevision;
}
namespace nv4base
{
    class NV4_Abs_EquipmntRevisionImpl;
}
namespace nv4base
{
    class NV4_Abs_EquipmntRevisionDelegate;
}
namespace nv4base
{
    class NV4_Abs_EquipmntRevisionDispatch;
}
namespace nv4base
{
    class NV4_Abs_EquipmntRevisionGenImpl;
}
namespace Teamcenter
{
    class RootObjectImpl;
}

class  NV4_LIBCORE_API  nv4base::NV4_Abs_EquipmntRevision
     : public ::Teamcenter::ItemRevision
{
public:

    /**
     * Get the Interface Name
     * @return - return desc for getInterfaceName
     */
    static const std::string& getInterfaceName();

protected:
    //  Method to initialize
    virtual void initialize( ::Teamcenter::RootObjectImpl*  impl );

    /**
     * Constructor
     */
    NV4_Abs_EquipmntRevision();

    /**
     * Destructor
     */
    virtual ~NV4_Abs_EquipmntRevision();

private:
    //  Getter method for the Implementation Object
    NV4_Abs_EquipmntRevisionImpl*  getNV4_Abs_EquipmntRevisionImpl() const;
    //  Setter method for the Implementation Object
    ::Teamcenter::RootObjectImpl*  setNV4_Abs_EquipmntRevisionImpl( ::Teamcenter::RootObjectImpl*  impl );

    //  Method to set the delete impl boolean
    void setDeleteImpl( bool del );

    // Pointer to the Implementation object
    NV4_Abs_EquipmntRevisionImpl*  m_nv4_abs_equipmntrevisionImpl;

    //  Flag to indicate if Implementation object needs to be deleted
    bool m_deleteImpl;

    /**
     * Name of the Business Object
     */
    static std::string name;

    /**
     *  Private default constructor. We do not want this class instantiated without the business object passed in.
     *  @param NV4_Abs_EquipmntRevision - desc for NV4_Abs_EquipmntRevision parameter
     */
    NV4_Abs_EquipmntRevision( const NV4_Abs_EquipmntRevision& );
    NV4_Abs_EquipmntRevision& operator=( const NV4_Abs_EquipmntRevision& );

    friend class  NV4_Abs_EquipmntRevisionDelegate;
    friend class  NV4_Abs_EquipmntRevisionDispatch;
    friend class  NV4_Abs_EquipmntRevisionGenImpl;
};

#include <NV4_LibCore/libnv4_libcore_undef.h>
#endif //   NV4BASE__NV4_ABS_EQUIPMNTREVISION__HXX
