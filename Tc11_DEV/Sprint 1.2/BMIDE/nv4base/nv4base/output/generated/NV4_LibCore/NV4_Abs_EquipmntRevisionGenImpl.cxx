//@<COPYRIGHT>@
//==================================================
//Copyright $2019.
//Siemens Product Lifecycle Management Software Inc.
//All Rights Reserved.
//==================================================
//@<COPYRIGHT>@

/*==================================================================================================
File description:
    This file contains the implementation for the Business Object, NV4_Abs_EquipmntRevisionGenImpl
    Filename:   NV4_Abs_EquipmntRevisionGenImpl.cxx
    Module:     NV4_LibCore
    @BMIDE autogenerated
==================================================================================================*/


#include <pom/pom/pom_errors.h>
#include <pom/pom/pom.h>
#include <mld/journal/journal.h>
#include <base_utils/ResultCheck.hxx>
#include <base_utils/IFail.hxx>
#include <base_utils/DateTime.hxx>
#include <base_utils/Mem.h>
#include <NV4_LibCore/NV4_Abs_EquipmntRevisionImpl.hxx>
#include <tccore/method.h>
#include <tccore/tctype.h>
#include <tccore/tctype.hxx>
#include <property/prop_msg.h>
#include <stdarg.h>
#include <ug_va_copy.h>

#include <NV4_LibCore/NV4_Abs_EquipmntRevision.hxx>
#include <NV4_LibCore/NV4_Abs_EquipmntRevisionGenImpl.hxx>

#include <NV4_LibCore/NV4_Abs_EquipmntRevisionDelegate.hxx>
#include <metaframework/BusinessObjectRegistry.hxx>
#include <metaframework/BusinessObject.hxx>
#include <metaframework/BusinessObjectRef.hxx>
#include <extensionframework/OperationDispatcherRegistry.hxx>


using  namespace  nv4base;


extern  "C"
{
    //  callback function declarations for overridden Operations
    static int  finalizeSaveAsInputCallbackFn1( METHOD_message_t*  msg, va_list  args );

}


//----------------------------------------------------------------------------------
//  NV4_Abs_EquipmntRevisionGenImpl::NV4_Abs_EquipmntRevisionGenImpl( nv4base::NV4_Abs_EquipmntRevision &)
//  Constructor for the class
//----------------------------------------------------------------------------------
NV4_Abs_EquipmntRevisionGenImpl::NV4_Abs_EquipmntRevisionGenImpl( nv4base::NV4_Abs_EquipmntRevision&  busObj )
    : m_busObj( &busObj )
{
}


//----------------------------------------------------------------------------------
//  NV4_Abs_EquipmntRevisionGenImpl::~NV4_Abs_EquipmntRevisionGenImpl()
//  Destructor for the class
//----------------------------------------------------------------------------------
NV4_Abs_EquipmntRevisionGenImpl::~NV4_Abs_EquipmntRevisionGenImpl()
{
    m_busObj = 0;
}



//----------------------------------------------------------------------------------
//  NV4_Abs_EquipmntRevisionGenImpl::getNV4_Abs_EquipmntRevision()
//  Accessor for the business object
//----------------------------------------------------------------------------------
nv4base::NV4_Abs_EquipmntRevision*
NV4_Abs_EquipmntRevisionGenImpl::getNV4_Abs_EquipmntRevision() const
{
    return  m_busObj;
}


//----------------------------------------------------------------------------------
//  NV4_Abs_EquipmntRevisionGenImpl::initializeClass()
//  Initialize Class
//----------------------------------------------------------------------------------
int  NV4_Abs_EquipmntRevisionGenImpl::initializeClass()
{
    
    if( JOURNAL_is_journaling() )
    {
        JOURNAL_routine_start( "NV4_Abs_EquipmntRevisionGenImpl::initializeClass" );
        JOURNAL_routine_call();
    }
    int ifail = 0;

    try
    {

        ResultCheck  rStat = 0;
        METHOD_id_t  method = {0};

        rStat = METHOD__register_operationFn( "NV4_Abs_EquipmntRevision", "finalizeSaveAsInput#Teamcenter::SaveAsInput,*$std::vector<Teamcenter::DeepCopyData*>,*",
                                              finalizeSaveAsInputCallbackFn1, 0, &method );

    }
    catch( const IFail& ex )
    {
        ifail = ex.ifail();
    }

    
    if( JOURNAL_is_journaling() )
    {
        JOURNAL_return_value( ifail );
        JOURNAL_routine_end();
    }
    return  ifail;
}



//----------------------------------------------------------------------------------
//  NV4_Abs_EquipmntRevisionGenImpl::newInstance()
//  Create a new instance of this Business Object
//----------------------------------------------------------------------------------
::Teamcenter::RootObjectImpl*  NV4_Abs_EquipmntRevisionGenImpl::newInstance()
{
    ::Teamcenter::RootObjectImpl*  pRootObj = 0;
    nv4base::NV4_Abs_EquipmntRevision*  busObj = dynamic_cast< nv4base::NV4_Abs_EquipmntRevision* >
         ( ::Teamcenter::BusinessObjectRegistry::instance().createBusinessObject( nv4base::NV4_Abs_EquipmntRevision::getInterfaceName() ) );
    if( busObj != 0 )
    {
        pRootObj = ( ::Teamcenter::RootObjectImpl* )( busObj->getNV4_Abs_EquipmntRevisionImpl() );
    }

    return  pRootObj;
}

tag_t  nv4base::NV4_Abs_EquipmntRevisionGenImpl::getNv4_SupplierEquipmentUIDTag() const
{
    static tag_t  tagAttrId = NULLTAG;
    //  statically cache the tag of the attr id.
    if( tagAttrId == NULLTAG )
    {
        POM_attr_id_of_attr( "nv4_SupplierEquipmentUID", "NV4_Abs_EquipmntRevision", &tagAttrId );
    }

    return  tagAttrId;
}

tag_t  nv4base::NV4_Abs_EquipmntRevisionGenImpl::getNv4_SupplierNameTag() const
{
    static tag_t  tagAttrId = NULLTAG;
    //  statically cache the tag of the attr id.
    if( tagAttrId == NULLTAG )
    {
        POM_attr_id_of_attr( "nv4_SupplierName", "NV4_Abs_EquipmntRevision", &tagAttrId );
    }

    return  tagAttrId;
}

tag_t  nv4base::NV4_Abs_EquipmntRevisionGenImpl::getNv4_ContactDetailsTag() const
{
    static tag_t  tagAttrId = NULLTAG;
    //  statically cache the tag of the attr id.
    if( tagAttrId == NULLTAG )
    {
        POM_attr_id_of_attr( "nv4_ContactDetails", "NV4_Abs_EquipmntRevision", &tagAttrId );
    }

    return  tagAttrId;
}

tag_t  nv4base::NV4_Abs_EquipmntRevisionGenImpl::getNv4_ManufacturingYearTag() const
{
    static tag_t  tagAttrId = NULLTAG;
    //  statically cache the tag of the attr id.
    if( tagAttrId == NULLTAG )
    {
        POM_attr_id_of_attr( "nv4_ManufacturingYear", "NV4_Abs_EquipmntRevision", &tagAttrId );
    }

    return  tagAttrId;
}

tag_t  nv4base::NV4_Abs_EquipmntRevisionGenImpl::getNv4_CommissioningDateTag() const
{
    static tag_t  tagAttrId = NULLTAG;
    //  statically cache the tag of the attr id.
    if( tagAttrId == NULLTAG )
    {
        POM_attr_id_of_attr( "nv4_CommissioningDate", "NV4_Abs_EquipmntRevision", &tagAttrId );
    }

    return  tagAttrId;
}

tag_t  nv4base::NV4_Abs_EquipmntRevisionGenImpl::getNv4_WarrantyStartTag() const
{
    static tag_t  tagAttrId = NULLTAG;
    //  statically cache the tag of the attr id.
    if( tagAttrId == NULLTAG )
    {
        POM_attr_id_of_attr( "nv4_WarrantyStart", "NV4_Abs_EquipmntRevision", &tagAttrId );
    }

    return  tagAttrId;
}

tag_t  nv4base::NV4_Abs_EquipmntRevisionGenImpl::getNv4_WarrantyEndTag() const
{
    static tag_t  tagAttrId = NULLTAG;
    //  statically cache the tag of the attr id.
    if( tagAttrId == NULLTAG )
    {
        POM_attr_id_of_attr( "nv4_WarrantyEnd", "NV4_Abs_EquipmntRevision", &tagAttrId );
    }

    return  tagAttrId;
}

tag_t  nv4base::NV4_Abs_EquipmntRevisionGenImpl::getNv4_OverallLenghtTag() const
{
    static tag_t  tagAttrId = NULLTAG;
    //  statically cache the tag of the attr id.
    if( tagAttrId == NULLTAG )
    {
        POM_attr_id_of_attr( "nv4_OverallLenght", "NV4_Abs_EquipmntRevision", &tagAttrId );
    }

    return  tagAttrId;
}

tag_t  nv4base::NV4_Abs_EquipmntRevisionGenImpl::getNv4_OverallWidthTag() const
{
    static tag_t  tagAttrId = NULLTAG;
    //  statically cache the tag of the attr id.
    if( tagAttrId == NULLTAG )
    {
        POM_attr_id_of_attr( "nv4_OverallWidth", "NV4_Abs_EquipmntRevision", &tagAttrId );
    }

    return  tagAttrId;
}

tag_t  nv4base::NV4_Abs_EquipmntRevisionGenImpl::getNv4_OverallHeightTag() const
{
    static tag_t  tagAttrId = NULLTAG;
    //  statically cache the tag of the attr id.
    if( tagAttrId == NULLTAG )
    {
        POM_attr_id_of_attr( "nv4_OverallHeight", "NV4_Abs_EquipmntRevision", &tagAttrId );
    }

    return  tagAttrId;
}

tag_t  nv4base::NV4_Abs_EquipmntRevisionGenImpl::getNv4_OverallDiamaterTag() const
{
    static tag_t  tagAttrId = NULLTAG;
    //  statically cache the tag of the attr id.
    if( tagAttrId == NULLTAG )
    {
        POM_attr_id_of_attr( "nv4_OverallDiamater", "NV4_Abs_EquipmntRevision", &tagAttrId );
    }

    return  tagAttrId;
}

tag_t  nv4base::NV4_Abs_EquipmntRevisionGenImpl::getNv4_OverallWeightTag() const
{
    static tag_t  tagAttrId = NULLTAG;
    //  statically cache the tag of the attr id.
    if( tagAttrId == NULLTAG )
    {
        POM_attr_id_of_attr( "nv4_OverallWeight", "NV4_Abs_EquipmntRevision", &tagAttrId );
    }

    return  tagAttrId;
}

tag_t  nv4base::NV4_Abs_EquipmntRevisionGenImpl::getNv4_PeakPowerTag() const
{
    static tag_t  tagAttrId = NULLTAG;
    //  statically cache the tag of the attr id.
    if( tagAttrId == NULLTAG )
    {
        POM_attr_id_of_attr( "nv4_PeakPower", "NV4_Abs_EquipmntRevision", &tagAttrId );
    }

    return  tagAttrId;
}

tag_t  nv4base::NV4_Abs_EquipmntRevisionGenImpl::getNv4_VoltageRequiredTag() const
{
    static tag_t  tagAttrId = NULLTAG;
    //  statically cache the tag of the attr id.
    if( tagAttrId == NULLTAG )
    {
        POM_attr_id_of_attr( "nv4_VoltageRequired", "NV4_Abs_EquipmntRevision", &tagAttrId );
    }

    return  tagAttrId;
}

tag_t  nv4base::NV4_Abs_EquipmntRevisionGenImpl::getNv4_CurrentRequiredTag() const
{
    static tag_t  tagAttrId = NULLTAG;
    //  statically cache the tag of the attr id.
    if( tagAttrId == NULLTAG )
    {
        POM_attr_id_of_attr( "nv4_CurrentRequired", "NV4_Abs_EquipmntRevision", &tagAttrId );
    }

    return  tagAttrId;
}

tag_t  nv4base::NV4_Abs_EquipmntRevisionGenImpl::getNv4_FreqencyTag() const
{
    static tag_t  tagAttrId = NULLTAG;
    //  statically cache the tag of the attr id.
    if( tagAttrId == NULLTAG )
    {
        POM_attr_id_of_attr( "nv4_Freqency", "NV4_Abs_EquipmntRevision", &tagAttrId );
    }

    return  tagAttrId;
}

tag_t  nv4base::NV4_Abs_EquipmntRevisionGenImpl::getNv4_ChargingDurationTag() const
{
    static tag_t  tagAttrId = NULLTAG;
    //  statically cache the tag of the attr id.
    if( tagAttrId == NULLTAG )
    {
        POM_attr_id_of_attr( "nv4_ChargingDuration", "NV4_Abs_EquipmntRevision", &tagAttrId );
    }

    return  tagAttrId;
}

tag_t  nv4base::NV4_Abs_EquipmntRevisionGenImpl::getNv4_PhaseTag() const
{
    static tag_t  tagAttrId = NULLTAG;
    //  statically cache the tag of the attr id.
    if( tagAttrId == NULLTAG )
    {
        POM_attr_id_of_attr( "nv4_Phase", "NV4_Abs_EquipmntRevision", &tagAttrId );
    }

    return  tagAttrId;
}

tag_t  nv4base::NV4_Abs_EquipmntRevisionGenImpl::getNv4_UPSTag() const
{
    static tag_t  tagAttrId = NULLTAG;
    //  statically cache the tag of the attr id.
    if( tagAttrId == NULLTAG )
    {
        POM_attr_id_of_attr( "nv4_UPS", "NV4_Abs_EquipmntRevision", &tagAttrId );
    }

    return  tagAttrId;
}

tag_t  nv4base::NV4_Abs_EquipmntRevisionGenImpl::getNv4_AvailabilityTag() const
{
    static tag_t  tagAttrId = NULLTAG;
    //  statically cache the tag of the attr id.
    if( tagAttrId == NULLTAG )
    {
        POM_attr_id_of_attr( "nv4_Availability", "NV4_Abs_EquipmntRevision", &tagAttrId );
    }

    return  tagAttrId;
}

tag_t  nv4base::NV4_Abs_EquipmntRevisionGenImpl::getNv4_PerformanceTag() const
{
    static tag_t  tagAttrId = NULLTAG;
    //  statically cache the tag of the attr id.
    if( tagAttrId == NULLTAG )
    {
        POM_attr_id_of_attr( "nv4_Performance", "NV4_Abs_EquipmntRevision", &tagAttrId );
    }

    return  tagAttrId;
}

tag_t  nv4base::NV4_Abs_EquipmntRevisionGenImpl::getNv4_YieldTag() const
{
    static tag_t  tagAttrId = NULLTAG;
    //  statically cache the tag of the attr id.
    if( tagAttrId == NULLTAG )
    {
        POM_attr_id_of_attr( "nv4_Yield", "NV4_Abs_EquipmntRevision", &tagAttrId );
    }

    return  tagAttrId;
}

tag_t  nv4base::NV4_Abs_EquipmntRevisionGenImpl::getNv4_MaintenanceFrequencyTag() const
{
    static tag_t  tagAttrId = NULLTAG;
    //  statically cache the tag of the attr id.
    if( tagAttrId == NULLTAG )
    {
        POM_attr_id_of_attr( "nv4_MaintenanceFrequency", "NV4_Abs_EquipmntRevision", &tagAttrId );
    }

    return  tagAttrId;
}

tag_t  nv4base::NV4_Abs_EquipmntRevisionGenImpl::getNv4_EquipmentComplianceStdTag() const
{
    static tag_t  tagAttrId = NULLTAG;
    //  statically cache the tag of the attr id.
    if( tagAttrId == NULLTAG )
    {
        POM_attr_id_of_attr( "nv4_EquipmentComplianceStd", "NV4_Abs_EquipmntRevision", &tagAttrId );
    }

    return  tagAttrId;
}

tag_t  nv4base::NV4_Abs_EquipmntRevisionGenImpl::getNv4_MaintenanceManualTag() const
{
    static tag_t  tagAttrId = NULLTAG;
    //  statically cache the tag of the attr id.
    if( tagAttrId == NULLTAG )
    {
        POM_attr_id_of_attr( "nv4_MaintenanceManual", "NV4_Abs_EquipmntRevision", &tagAttrId );
    }

    return  tagAttrId;
}

tag_t  nv4base::NV4_Abs_EquipmntRevisionGenImpl::getNv4_SparePartListTag() const
{
    static tag_t  tagAttrId = NULLTAG;
    //  statically cache the tag of the attr id.
    if( tagAttrId == NULLTAG )
    {
        POM_attr_id_of_attr( "nv4_SparePartList", "NV4_Abs_EquipmntRevision", &tagAttrId );
    }

    return  tagAttrId;
}

tag_t  nv4base::NV4_Abs_EquipmntRevisionGenImpl::getNv4_MaxMechanicalSpeedTag() const
{
    static tag_t  tagAttrId = NULLTAG;
    //  statically cache the tag of the attr id.
    if( tagAttrId == NULLTAG )
    {
        POM_attr_id_of_attr( "nv4_MaxMechanicalSpeed", "NV4_Abs_EquipmntRevision", &tagAttrId );
    }

    return  tagAttrId;
}

tag_t  nv4base::NV4_Abs_EquipmntRevisionGenImpl::getNv4_NominalThroughputTag() const
{
    static tag_t  tagAttrId = NULLTAG;
    //  statically cache the tag of the attr id.
    if( tagAttrId == NULLTAG )
    {
        POM_attr_id_of_attr( "nv4_NominalThroughput", "NV4_Abs_EquipmntRevision", &tagAttrId );
    }

    return  tagAttrId;
}

tag_t  nv4base::NV4_Abs_EquipmntRevisionGenImpl::getNv4_DateofDesRevAgreementTag() const
{
    static tag_t  tagAttrId = NULLTAG;
    //  statically cache the tag of the attr id.
    if( tagAttrId == NULLTAG )
    {
        POM_attr_id_of_attr( "nv4_DateofDesRevAgreement", "NV4_Abs_EquipmntRevision", &tagAttrId );
    }

    return  tagAttrId;
}

tag_t  nv4base::NV4_Abs_EquipmntRevisionGenImpl::getNv4_DateOfCommisioningFactTag() const
{
    static tag_t  tagAttrId = NULLTAG;
    //  statically cache the tag of the attr id.
    if( tagAttrId == NULLTAG )
    {
        POM_attr_id_of_attr( "nv4_DateOfCommisioningFact", "NV4_Abs_EquipmntRevision", &tagAttrId );
    }

    return  tagAttrId;
}

tag_t  nv4base::NV4_Abs_EquipmntRevisionGenImpl::getNv4_DateOfCommisioningSiteTag() const
{
    static tag_t  tagAttrId = NULLTAG;
    //  statically cache the tag of the attr id.
    if( tagAttrId == NULLTAG )
    {
        POM_attr_id_of_attr( "nv4_DateOfCommisioningSite", "NV4_Abs_EquipmntRevision", &tagAttrId );
    }

    return  tagAttrId;
}

tag_t  nv4base::NV4_Abs_EquipmntRevisionGenImpl::getNv4_MaxPowerConsumptionTag() const
{
    static tag_t  tagAttrId = NULLTAG;
    //  statically cache the tag of the attr id.
    if( tagAttrId == NULLTAG )
    {
        POM_attr_id_of_attr( "nv4_MaxPowerConsumption", "NV4_Abs_EquipmntRevision", &tagAttrId );
    }

    return  tagAttrId;
}

tag_t  nv4base::NV4_Abs_EquipmntRevisionGenImpl::getNv4_AvgPowerConsumptionTag() const
{
    static tag_t  tagAttrId = NULLTAG;
    //  statically cache the tag of the attr id.
    if( tagAttrId == NULLTAG )
    {
        POM_attr_id_of_attr( "nv4_AvgPowerConsumption", "NV4_Abs_EquipmntRevision", &tagAttrId );
    }

    return  tagAttrId;
}

tag_t  nv4base::NV4_Abs_EquipmntRevisionGenImpl::getNv4_timebwfailureTag() const
{
    static tag_t  tagAttrId = NULLTAG;
    //  statically cache the tag of the attr id.
    if( tagAttrId == NULLTAG )
    {
        POM_attr_id_of_attr( "nv4_timebwfailure", "NV4_Abs_EquipmntRevision", &tagAttrId );
    }

    return  tagAttrId;
}

tag_t  nv4base::NV4_Abs_EquipmntRevisionGenImpl::getNv4_timetorepairTag() const
{
    static tag_t  tagAttrId = NULLTAG;
    //  statically cache the tag of the attr id.
    if( tagAttrId == NULLTAG )
    {
        POM_attr_id_of_attr( "nv4_timetorepair", "NV4_Abs_EquipmntRevision", &tagAttrId );
    }

    return  tagAttrId;
}




//
//  Callback Function for Operation,    finalizeSaveAsInput
//
static int  finalizeSaveAsInputCallbackFn1( METHOD_message_t*  msg, va_list  args )
{
    va_list largs;
    va_copy( largs, args );

    ::Teamcenter::SaveAsInput *pSavAsInput = va_arg( largs, ::Teamcenter::SaveAsInput* );
    std::vector<  ::Teamcenter::DeepCopyData* > *vecDeepCopyData = va_arg( largs, std::vector<  ::Teamcenter::DeepCopyData* >* );
    va_end( largs );

    int ifail = 0;
    tag_t  tagObject = NULLTAG;
    METHOD_PROP_MESSAGE_OBJECT( msg, tagObject );
    BusinessObjectRef< nv4base::NV4_Abs_EquipmntRevision >  owningObj( tagObject );
    if( owningObj.isInstanceOf< nv4base::NV4_Abs_EquipmntRevision >() )
    {
        ifail = nv4base::NV4_Abs_EquipmntRevisionDelegate::getInstance().finalizeSaveAsInputBase( *owningObj, pSavAsInput, vecDeepCopyData );
    }

    return  ifail;
}


///
/// finalize operation input
/// @param pSavAsInput - desc
/// @param vecDeepCopyData - desc
/// @return - returns an int
///
int  NV4_Abs_EquipmntRevisionGenImpl::super_finalizeSaveAsInputBase( ::Teamcenter::SaveAsInput *pSavAsInput, std::vector<  ::Teamcenter::DeepCopyData* > *vecDeepCopyData )
{
    int ifail = 0;
    ifail = ( NV4_Abs_EquipmntRevisionDelegate::getInstance() ).super_NV4_Abs_EquipmntRevision_finalizeSaveAsInputBase( *m_busObj, pSavAsInput, vecDeepCopyData  );

    return  ifail;
}


    //  OperationDispatcher SubClass definitions

