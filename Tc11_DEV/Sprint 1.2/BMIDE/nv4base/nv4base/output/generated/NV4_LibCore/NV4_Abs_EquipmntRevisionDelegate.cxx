//@<COPYRIGHT>@
//==================================================
//Copyright $2019.
//Siemens Product Lifecycle Management Software Inc.
//All Rights Reserved.
//==================================================
//@<COPYRIGHT>@

/*==================================================================================================
File description:
    This file contains the implementation for the Business Object, NV4_Abs_EquipmntRevisionDelegate
    Filename:   NV4_Abs_EquipmntRevisionDelegate.cxx
    Module:     NV4_LibCore
    @BMIDE autogenerated
==================================================================================================*/


#include <NV4_LibCore/NV4_Abs_EquipmntRevisionDelegate.hxx>
#include <NV4_LibCore/NV4_Abs_EquipmntRevisionGenImpl.hxx>
#include <tccore/ItemRevisionDelegate.hxx>
#include <NV4_LibCore/NV4_Abs_EquipmntRevisionImpl.hxx>
#include <mld/journal/journal.h>
#include <base_utils/ResultCheck.hxx>
#include <base_utils/IFail.hxx>
#include <tccore/tctype_errors.h>
#include <common/basic_definitions.h>



using  namespace  nv4base;


NV4_Abs_EquipmntRevisionDelegate*  NV4_Abs_EquipmntRevisionDelegate::m_pInstance = 0;


//----------------------------------------------------------------------------------
// NV4_Abs_EquipmntRevisionDelegate::getInstance()
// Get the singleton class instance
//----------------------------------------------------------------------------------
NV4_Abs_EquipmntRevisionDelegate&  NV4_Abs_EquipmntRevisionDelegate::getInstance()
{
    if( 0 == m_pInstance )
    {
        throw  IFail( TYPE_not_initialized );
    }

    return  *m_pInstance;
}


//----------------------------------------------------------------------------------
// NV4_Abs_EquipmntRevisionDelegate::setInstance()
// Set the singleton class instance
//----------------------------------------------------------------------------------
void NV4_Abs_EquipmntRevisionDelegate::setInstance( NV4_Abs_EquipmntRevisionDelegate*  instance )
{
    m_pInstance = instance;
}

//----------------------------------------------------------------------------------
// NV4_Abs_EquipmntRevisionDelegate::createImpl()
// create the Implementation pointer
//----------------------------------------------------------------------------------
NV4_Abs_EquipmntRevisionImpl*  NV4_Abs_EquipmntRevisionDelegate::createImpl( NV4_Abs_EquipmntRevision&  ifObj )
{
    NV4_Abs_EquipmntRevisionImpl*  impl = 0;
    impl = new  NV4_Abs_EquipmntRevisionImpl( ifObj );
    return  impl;
}


//----------------------------------------------------------------------------------
// NV4_Abs_EquipmntRevisionDelegate::deleteImpl()
// Delete the Implementation pointer
//----------------------------------------------------------------------------------
void NV4_Abs_EquipmntRevisionDelegate::deleteImpl( NV4_Abs_EquipmntRevisionImpl*  impl )
{
    delete  impl;
}


//----------------------------------------------------------------------------------
// NV4_Abs_EquipmntRevisionDelegate::NV4_Abs_EquipmntRevisionDelegate()
// Constructor for the class
//----------------------------------------------------------------------------------
NV4_Abs_EquipmntRevisionDelegate::NV4_Abs_EquipmntRevisionDelegate()
{
}


//----------------------------------------------------------------------------------
// NV4_Abs_EquipmntRevisionDelegate::~NV4_Abs_EquipmntRevisionDelegate()
// Destructor for the class
//----------------------------------------------------------------------------------
NV4_Abs_EquipmntRevisionDelegate::~NV4_Abs_EquipmntRevisionDelegate()
{
}


//----------------------------------------------------------------------------------
// NV4_Abs_EquipmntRevisionDelegate::initializeClass()
// Initialize the Class
//----------------------------------------------------------------------------------
int NV4_Abs_EquipmntRevisionDelegate::initializeClass()
{
    
    if( JOURNAL_is_journaling() )
    {
        JOURNAL_routine_start( "NV4_Abs_EquipmntRevisionDelegate::initializeClass" );
        JOURNAL_routine_call();
    }
    int ifail = 0;

    try
    {
        ResultCheck  rStat = NV4_Abs_EquipmntRevisionImpl::initializeClass();
    }
    catch( const IFail& ex )
    {
        ifail = ex.ifail();
    }

    
    if( JOURNAL_is_journaling() )
    {
        JOURNAL_return_value( ifail );
        JOURNAL_routine_end();
    }
    return  ifail;
}



///
/// finalize operation input
/// @param pSavAsInput - desc
/// @param vecDeepCopyData - desc
/// @return - returns an int
///
int  NV4_Abs_EquipmntRevisionDelegate::finalizeSaveAsInputBase(const NV4_Abs_EquipmntRevision &ifObj,  ::Teamcenter::SaveAsInput *pSavAsInput, std::vector<  ::Teamcenter::DeepCopyData* > *vecDeepCopyData )
{
    return  ( ifObj.getNV4_Abs_EquipmntRevisionImpl() )->finalizeSaveAsInputBase(  pSavAsInput, vecDeepCopyData  );
}

